plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    neoForge {
    }
    mixin {
        useLegacyMixinAp = true
        add("main", "irisflw.refmap.json")
    }

    runs {
        configureEach {
            property("forge.logging.markers", "")
            property("forge.logging.console.level", "debug")
        }
    }
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven { url = "https://mvn.devos.one/snapshots" } // Registrate
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    modCompileOnly ("dev.engine-room.flywheel:flywheel-neoforge-${flywheel_minecraft_version}:${flywheel_neoforge_version}")
    modCompileOnly ("maven.modrinth:iris:${iris_version}-neoforge")

//    forgeRuntimeLibrary ('org.anarres:jcpp:1.4.14')
    localRuntime 'io.github.douira:glsl-transformer:2.0.1'
    localRuntime ("maven.modrinth:iris:${iris_version}-neoforge")
    localRuntime ("maven.modrinth:sodium:${sodium_version}-neoforge")
    modLocalRuntime ("com.simibubi.create:create-${minecraft_version}:${create_version}") { transitive = false }
    modLocalRuntime ("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}")
    modLocalRuntime ("dev.engine-room.flywheel:flywheel-neoforge-${flywheel_minecraft_version}:${flywheel_neoforge_version}")
    modLocalRuntime ("com.tterrag.registrate:Registrate:${registrate_version}")
    modLocalRuntime ("dev.engine-room.vanillin:vanillin-neoforge-${flywheel_minecraft_version}:${vanillin_neoforge_version}")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
